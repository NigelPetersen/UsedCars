library(tidyverse)
library(ggplot2)
library(here)
library(gridExtra)

cars_data <- read.csv(here("cleaned_data.csv"))
cars_data <- cars_data |> select(-c("X"))

plot_counts <- function(data, variable, color = "purple", 
                        rotate = 0, add_unif = F){
  my_plot <- data |> group_by(!!sym(variable)) |>
    ggplot() +
    geom_bar(aes(x = !!sym(variable)), fill = color,
             alpha = 0.5, ) +
    theme_bw() + 
    labs(x = variable, y = "Count", 
         title = paste("Counts of", variable)) +
    theme(plot.title = element_text(hjust = 0.5),
          axis.text.x = element_text(angle = rotate))
  if(add_unif){
    y_int = nrow(data)/length(unique(data[,variable]))
    my_plot + geom_hline(yintercept = y_int, linetype = "dashed",
                         color = color)
  }
  else{
    my_plot
  }
}


get_proportions <- function(data, variable){
  data |> group_by(!!sym(variable)) |>
    summarise(n = n()) |>
    mutate(proportion = 100*n/sum(n)) |>
    select(-c(n))
}


boxplot_against_responses <- function(data, variable, color = "purple"){
  data |> select(variable, price_usd, log_price) |>
    pivot_longer(price_usd:log_price, names_to = "price_type", 
                 values_to = "price") |> ggplot() + 
    geom_boxplot(aes(x = reorder(!!sym(variable), price), y = price), fill = color,
                 alpha = 0.3) + 
    facet_wrap(~price_type, ncol = 2, scales = "free",
               labeller = as_labeller(c(log_price = "log(Price USD)",
                                        price_usd = "Price USD")) ) + 
    coord_flip() + 
    theme_bw() + 
    theme(plot.title = element_text(hjust = 0.5))
}


scatterplot_against_responses <- function(data, variable, color = "purple"){
  data |> select(variable, price_usd, log_price) |>
    pivot_longer(price_usd:log_price, names_to = "price_type", 
                 values_to = "price") |> ggplot(aes(y = price)) + 
    geom_point(aes(x = !!sym(variable)), fill = color,
                 alpha = 0.3) + 
    facet_wrap(~price_type, ncol = 2, scales = "free",
               labeller = as_labeller(c(log_price = "log(Price USD)",
                                        price_usd = "Price USD")) ) + 
    theme_bw() + 
    theme(plot.title = element_text(hjust = 0.5))
}


cars_data |> group_by(manufacturer_name) |> 
  summarise(avg_price = mean(price_usd), avg_year_prod = round(mean(year_produced)),
            avg_odom = mean(odometer_value)) |> 
  arrange(-avg_price) |> print(n=50)


summary_table <- function(data, variable, highest_first = T){
  tab <- data |> group_by(!!sym(variable)) |>
    summarise(avg_price = mean(price_usd), avg_year = round(mean(year_produced)),
              avg_odom = mean(odometer_value)) |>
    arrange((-1)^highest_first * avg_price)
  
  tab["prop"] <- get_proportions(data, variable)[,2]
  
  tab |> print(n = nrow(cars_data))
}


cars_data |> mutate(transmission = recode(transmission, "mechanical" = "manual")) |>
  group_by(color) |>
  ggplot() +
  geom_boxplot(aes(x = color, y = log_price, fill = transmission)) +
  theme_bw() + 
  labs(x = "Vehicle Color", y = "log(Price USD)", 
       title = "log(Price USD) Across Vehicle Colors by Transmission") + 
  theme(plot.title = element_text(hjust = 0.5))



cars_data |> mutate(transmission = recode(transmission, "mechanical" = "manual")) |>
  group_by(manufacturer_name) |>
  ggplot() +
  geom_boxplot(aes(x = manufacturer_name, y = price, fill = transmission)) + 
  theme_bw() +
  labs(x = "Vehicle Manufacturer", y = "log(Price USD)",
       title = "log(Price USD) against Manufacturer across Transmission") +
  theme(plot.title = element_text(hjust = 0.5)) +
  coord_flip()
  

##################################################################################
############################# FUNCTION CALLS #####################################
##################################################################################

plot_counts(cars_data, "color")

boxplot_against_responses(cars_data, "body_type")

scatterplot_against_responses(cars_data, "year_produced")
scatterplot_against_responses(cars_data, "odometer_value")

summary_table(cars_data, "manufacturer_name")
get_proportions(cars_data, "state")
summary_table(cars_data, "manufacturer_name")



######################### PLAYING AROUND WITH GGPLOT ############################

  

cars_data |> filter(manufacturer_name == "Toyota",
                    body_type %in% c("coupe", "hatchback", "sedan")) |> 
  select(body_type, log_price, transmission) |> ggplot() +
  geom_boxplot(aes(x = body_type, fill = transmission,
                   y = log_price)) +
  labs(x = "Vehicle Body Type", y = "log(Price in USD)", 
       title = "Body Type againt log(Price in USD)") + theme_bw() +
  theme(plot.title = element_text(hjust = 0.5)) +
  scale_fill_manual(values = c("deeppink", "plum1"))


cars_data |> select(body_type, transmission, log_price, price_usd) |>
  pivot_longer(price_usd:log_price, names_to = "Price_type", values_to = "Price") |>
  mutate(Price_type = recode(Price_type, log_price = "Log(Price in USD)",
                             price_usd = "Price in USD")) |>
  ggplot() + geom_boxplot(aes(x = reorder(body_type, Price), y = Price, fill = transmission)) + 
  labs(x = "Vehicle Body Type", y = "Price", 
       title = "Vehicle Body Type against Price by Transmission type") +
  facet_wrap(~Price_type, scales = "free") + theme_bw() + 
  theme(plot.title = element_text(hjust = 0.5)) + 
  scale_fill_manual(values = c("deeppink", "deeppink4")) +
  coord_flip()


# comparative plot between Honda and Toyota

cars_data |> filter(manufacturer_name %in% c("Honda", "Toyota"),
                    body_type %in% c("coupe", "hatchback", "sedan")) |>
  select(price_usd, manufacturer_name, body_type) |>
  ggplot() + geom_boxplot(aes(x = body_type, y = price_usd, fill = manufacturer_name)) + 
  labs(x = "Vehicle Body Type", y = "Price in USD", 
       title = "Japanese Cars: Body Type against Price") + theme_bw() +
  theme(plot.title = element_text(hjust = 0.5)) + 
  scale_fill_manual(name = "Manufacturer", values = c("deeppink", "pink"))



plot_data <- cars_data |> mutate(HighMileage = (odometer_value > 250000)) |>
  filter(price_usd < 15000)
plot_data$HighMileage <- factor(plot_data$HighMileage, labels = c("More than 250000 km",
                                                                  "Less than 250000 km"))

group_plot_1 <- plot_data |> filter(manufacturer_name %in% c("Honda", "Toyota"),
         body_type %in% c("coupe", "hatchback", "sedan")) |>
  select(price_usd, manufacturer_name, HighMileage, body_type) |>
  ggplot() + geom_boxplot(aes(x = body_type, y = price_usd, fill = manufacturer_name)) +
  labs(x = "Vehicle Body Type", y = "Price in USD",
       title = "Comparison of Honda and Toyota Price by Body Type and Odometer Value") +
  theme_bw() + theme(plot.title = element_text(hjust = 0.5)) + 
  facet_wrap(~HighMileage) + 
  scale_fill_manual(name = "Manufacturer", values = c("deeppink", "deeppink4"))


group_plot_2 <- plot_data |> filter(manufacturer_name %in% c("Honda", "Toyota"),
                    body_type %in% c("coupe", "hatchback", "sedan")) |>
  select(manufacturer_name, body_type, HighMileage) |> group_by(body_type) |>
  ggplot() + geom_bar(aes(x = body_type, fill = manufacturer_name), position = "dodge") +
  labs(x = "Vehicle Body Type", y = "Frequency", 
       title = "Frequency of Vehicle Body Type across Manufactureres") +
  theme_bw() + 
  theme(plot.title = element_text(hjust = 0.5)) +
  facet_wrap(~HighMileage) + 
  scale_fill_manual(name = "Manufacturer", values = c("deeppink", "deeppink4"))

grid.arrange(group_plot_1, group_plot_2)




cars_data |> select(price_usd, manufacturer_name) |> 
  filter(manufacturer_name %in% c("Honda", "Toyota", "Porsche")) |> 
  ggplot(aes(price_usd, fill = manufacturer_name)) + 
  geom_density(alpha = 0.3) + 
  theme_bw() + 
  scale_fill_manual(name = "Manufacturer", values = c("red", "blue", "green"))


plot_data |> filter(manufacturer_name %in% c("Honda", "Toyota")) |>
  ggplot() + 
  geom_boxplot(aes(x = manufacturer_name, y = price_usd, 
                   fill = transmission)) + 
  facet_wrap(~HighMileage) + theme_bw() + 
  scale_fill_manual(values = c("orange", "blue"))
